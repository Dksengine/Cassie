name: Build & Release CLI

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, windows]
        goarch: [amd64]

    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-go@v4
        with:
          go-version: '1.22.2'

      - name: Build binary
        run: |
          mkdir -p dist
          EXT=""
          if [ "${{ matrix.goos }}" == "windows" ]; then
            EXT=".exe"
          fi
          GOOS=${{ matrix.goos }} GOARCH=${{ matrix.goarch }} go build -o dist/cassie_${{ matrix.goos }}${EXT} main.go

      # Create .deb package for Ubuntu (only on Ubuntu)
      - name: Create .deb package (only on Ubuntu)
        if: matrix.goos == 'linux'
        run: |
          mkdir -p myapp/DEBIAN
          VERSION=${GITHUB_REF_NAME#v}
          echo "Package: cassie" > myapp/DEBIAN/control
          echo "Version: $VERSION" >> myapp/DEBIAN/control
          echo "Architecture: amd64" >> myapp/DEBIAN/control
          echo "Maintainer: You <labs@dksengine.com>" >> myapp/DEBIAN/control
          echo "Description: CLI to change case" >> myapp/DEBIAN/control
          mkdir -p myapp/usr/local/bin
          cp dist/cassie_${{ matrix.goos }}${EXT} myapp/usr/local/bin/cassie
          dpkg-deb --build myapp
          mv myapp.deb dist/cassie_${{ matrix.goos }}.deb

      # Install fpm
      - name: Install fpm
        run: |
          sudo apt-get update
          sudo apt-get install -y ruby ruby-dev gcc make
          sudo gem install --no-document fpm

      # Create .rpm package for Fedora (only on Fedora)
      - name: Create .rpm package (only on Fedora)
        if: matrix.goos == 'linux'
        run: |
          mkdir -p myapp/usr/local/bin
          cp dist/cassie_${{ matrix.goos }}${EXT} myapp/usr/local/bin/cassie
          fpm -s dir -t rpm -n cassie -v $VERSION --prefix /usr/local myapp/usr/local/bin/cassie
          mv cassie-$VERSION-1.x86_64.rpm dist/cassie_fedora.rpm

      # Create Arch package for Arch Linux (only on Arch)
      - name: Create Arch package (only on Arch)
        if: matrix.goos == 'linux'
        run: |
          mkdir -p myapp/usr/local/bin
          cp dist/cassie_${{ matrix.goos }}${EXT} myapp/usr/local/bin/cassie
          fpm -s dir -t pacman -n cassie -v $VERSION --prefix /usr/local myapp/usr/local/bin/cassie
          mv cassie-$VERSION-1-x86_64.pkg.tar.zst dist/cassie_arch.pkg.tar.zst

      # Create Windows .exe binary (only on Windows)
      - name: Create Windows .exe binary (only on Windows)
        if: matrix.goos == 'windows'
        run: |
          mkdir -p dist
          GOOS=windows GOARCH=amd64 go build -o dist/cassie_windows.exe main.go
